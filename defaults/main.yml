---

# Remove build directory with created
# Cloudformation templates on each run?
cloudformation_clean_build_env: False


# Overwrite this variable via command line to only generate
# Cloudformation files from Jinja2 templates.
# This is supposed to only be used for debugging purposes
# $ ansible-playbook play.yml -e cloudformation_generate_only=yes
cloudformation_generate_only: False

# Overwrite this variable via command line to only describe generated changesets
# Used in jenkins based deployments as to display proposed changes before they are approved
# $ ansible-playbook play.yml -e cloudformation_describe_only=yes
cloudformation_describe_only: False

# This role ships a custom Ansible Cloudformation module:
# cloudformation_diff.py - https://github.com/cytopia/ansible-modules
# This module generates a text-based diff output between your local
# cloudformation template ready to be deployed and the currently deployed
# templated on AWS Cloudformation.
# Why would I want this?
# The current cloudformation module only list change sets in --check mode,
# which will let you know what *kind* will change (e.g. security groups),
# but not what exactly will change (which security groups and the values of them)
# In order to also be able to view the exact changes that will take place,
# enable the cloudformation_diff module here.
cloudformation_run_diff: False


# When using cloudformation_diff specify the output format of your cloudformation templates
# When you are using json-based cloudformation templates, set it to 'json' and when
# you use yaml-based cloudformation templates, set it to 'yaml'.
cloudformation_diff_output: json


# Dictionary of cloudformation defaults which will be applied
# to all stacks. Values supplied explicitly to a stack take
# precendence. All of the default values are optional and
# if none are specified here nor in the cloudformation stacks
# they will be omitted.
cloudformation_defaults: {}
# ---- optional ----
#  aws_access_key:
#  aws_secret_key:
#  security_token:
#  profile:
#  notification_arns:
#  region:


# Array of available cloudformation stack keys that you want
# to enforce to be required instead of optional.
# Each cloudformation stack item will be checked against the customly
# set required keys. In case a stack item does not contain any of those
# keys, an error will be thrown before any deployment has happened.
# What would this be good for?
# Imagine your company wants to enforce the usage of boto profiles for
# all AWS related modules, then you would set this as required in
# groups_vars/all.yml to prevent anyone from forgetting to set it.
# see tasks/assert.yml for implementation
cloudformation_required: []
#  - aws_access_key
#  - aws_secret_key
#  - security_token:
#  - profile
#  - notification_arns
#  - region


# Array of cloudformation stacks to deploy
# Module arguments passed here take precendence over any
# defaults set above.
cloudformation_stacks: []
# ---- required ----
#  - stack_name:
#    template: path/to/file
# ---- optional ----
#    aws_access_key:
#    aws_secret_key:
#    security_token:
#    profile:
#    notification_arns:
#    region:
#    template_parameters:
#      param1: val1
#      param2: val2
#    tags:
#      tag1: val1
#      tag2: val2


# Use changesets
create_changeset: True
execute_changeset: False
changeset_name: "Ansible"

# Default to rollback off
disable_rollback: True

pre_detect_drift: False #detect if stack(s) have drifted before actions
detect_drift: False #detect if stack(s) have drifted after actions
